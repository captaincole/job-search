/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */
declare global {
  namespace JSX {
    interface Element {}
    export interface IntrinsicElements {}
  }
  namespace JSXElements {}

  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }

  interface HTMLAttributes {}
}

import 'ionicons';
import '@ionic/core';

import {
  Vote,
} from './model/model';

import {
  AppHome as AppHome
} from './components/app-home/app-home';

declare global {
  interface HTMLAppHomeElement extends AppHome, HTMLStencilElement {
  }
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-home": JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  LoginForm as LoginForm
} from './components/login-form/login-form';

declare global {
  interface HTMLLoginFormElement extends LoginForm, HTMLStencilElement {
  }
  var HTMLLoginFormElement: {
    prototype: HTMLLoginFormElement;
    new (): HTMLLoginFormElement;
  };
  interface HTMLElementTagNameMap {
    "login-form": HTMLLoginFormElement;
  }
  interface ElementTagNameMap {
    "login-form": HTMLLoginFormElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "login-form": JSXElements.LoginFormAttributes;
    }
  }
  namespace JSXElements {
    export interface LoginFormAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  MyApp as MyApp
} from './components/my-app/my-app';

declare global {
  interface HTMLMyAppElement extends MyApp, HTMLStencilElement {
  }
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "my-app": JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  OpportunityItem as OpportunityItem
} from './components/opportunity/opportunity-item';

declare global {
  interface HTMLOpportunityItemElement extends OpportunityItem, HTMLStencilElement {
  }
  var HTMLOpportunityItemElement: {
    prototype: HTMLOpportunityItemElement;
    new (): HTMLOpportunityItemElement;
  };
  interface HTMLElementTagNameMap {
    "opportunity-item": HTMLOpportunityItemElement;
  }
  interface ElementTagNameMap {
    "opportunity-item": HTMLOpportunityItemElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "opportunity-item": JSXElements.OpportunityItemAttributes;
    }
  }
  namespace JSXElements {
    export interface OpportunityItemAttributes extends HTMLAttributes {
      company?: string;
      id?: string;
      jobReqUrl?: any;
      location?: string;
      points?: number;
      rank?: number;
      source?: string;
      status?: string;
      title?: string;
      user?: any;
      vote?: Vote;
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
